version: 2.1
#色んな人が定義したjobをシェアできるようにするための設定
orbs:
  ruby: circleci/ruby@1.1.2
  heroku: circleci/heroku@1.2.3

#buildとtestのjobを定義
jobs:
  build:
    #実行環境
    docker:
      #imageを指定
      - image: circleci/ruby:2.7
    #作業場所、ここはgithubのリポジトリ名と同じにする
    #gitリポジトリからソースコードをコピー
    working_directory: ~/rails-docker-tkh/src
    #実際の動作をするjobを書く
    #
    steps:
      #gitリポジトリをコピーする
      - checkout:
          path: ~/rails-docker-tkh
      #orbsのbundle install方法
      - ruby/install-deps

  #circleciの実行環境
  test:
    docker:
      - image: circleci/ruby:2.7
      - image: circleci/mysql:5.5
        #src/config/database.yml参照
        #database用の環境変数
        environment:
          MYSQL_ROOT/PASSWORD: password
          MYSQL_DATABASE: app_test
          MYSQL_USER: root
    #testjobの環境変数
    environment:
      BUNDLE_JOBS: "3"
      BUNDLE_RETRY: "3"
      APP_DATABASE_HOST: "127.0.0.1"
      RAILS_ENV: test
    #作業場所
    working_directory: ~/rails-docker-tkh/src
    steps:
      #gitのリポジトリからソースコードをcheckout
      - checkout:
          path: ~/rails-docker-tkh
      #bundle install
      - ruby/install-deps
      #bundle install後の操作
      - run:
          name: Database setup
          command: bundle exec rails db:migrate
      #testの実行
      - run:
          name: test
          command: bundle exec rake test

  deploy:
    #実行環境
    docker:
      - image: cirleci/ruby:2.7
    steps:
      - checkout
      #dockerコマンドを使うことができる
      - setup_remote_docker:
          version: 19.03.13
      #orbsのherokuのおかげで、ここは下記の記述だけでherokuをインストールすることができる
      - heroku/install
      #ここから実行コマンド
      - run:
          name: heroku login
          command: heroku container:login
      - run:
          name: push docker image
          command: heroku container:push web -a $HEROKU_APP_NAME
      - run:
          name: release docker image
          command: heroku container:release web -a $HEROKU_APP_NAME
      - run:
          name: database setup
          command: heroku run bundle exec rake db:migrate RAILS_ENV=production -a $HEROKU_APP_NAME

workflows:
  version: 2
  build_test_and_deploy:
    #jobsの実行順序
    jobs:
      - build
      - test:
          requires:
            - build
      - deploy:
          requires:
            - test
          #buildとtestはpushされるたびに実行されるが、
          #deployのjobsはmain branchに変更があった時だけ、
          #つまりmain branchにマージされた時にだけdeployが実行される
          filters:
            branches:
              only: main
